--- a/taglib/toolkit/tfilestream.cpp
+++ b/taglib/toolkit/tfilestream.cpp
@@ -52,9 +52,22 @@
     const DWORD access = readOnly ? GENERIC_READ : (GENERIC_READ | GENERIC_WRITE);
 
     if(!path.wstr().empty())
+#if _WIN32_WINNT >= 0x0602
+      return CreateFile2(path.wstr().c_str(), access, FILE_SHARE_READ, OPEN_EXISTING, NULL);
+#else
       return CreateFileW(path.wstr().c_str(), access, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
+#endif
     else if(!path.str().empty())
+#if defined(WINAPI_FAMILY) && WINAPI_FAMILY != WINAPI_FAMILY_DESKTOP_APP
+    {
+      auto size = MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, path.str().data(), path.str().size(), NULL, 0);
+      std::wstring tmp(size, L'\0');
+      MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, path.str().data(), path.str().size(), &tmp[0], tmp.size());
+      return CreateFile2(tmp.c_str(), access, FILE_SHARE_READ, OPEN_EXISTING, NULL);
+    }
+#else
       return CreateFileA(path.str().c_str(), access, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
+#endif
     else
       return InvalidFileHandle;
   }
@@ -437,9 +450,10 @@
 #ifdef _WIN32
 
   SetLastError(NO_ERROR);
-  const DWORD fileSize = GetFileSize(d->file, NULL);
+  LARGE_INTEGER fSize;
+  GetFileSizeEx(d->file, &fSize);
   if(GetLastError() == NO_ERROR) {
-    return static_cast<long>(fileSize);
+    return static_cast<long>(fSize.QuadPart);
   }
   else {
     debug("FileStream::length() -- Failed to get the file size.");
