set(CMAKE_SYSTEM_NAME @CMAKE_SYSTEM_NAME@)
set(CMAKE_SYSTEM_VERSION @CMAKE_SYSTEM_VERSION@)
if(NOT CMAKE_PROJECT_NAME STREQUAL CMAKE_TRY_COMPILE)
	set(CMAKE_CONFIGURATION_TYPES @CMAKE_CONFIGURATION_TYPES@)
	if(@CMAKE_CONFIGURATION_TYPES@ STREQUAL Release)
		list(APPEND CMAKE_CONFIGURATION_TYPES RelWithDebInfo)
	elseif(@CMAKE_CONFIGURATION_TYPES@ STREQUAL RelWithDebInfo)
		list(APPEND CMAKE_CONFIGURATION_TYPES Release)
	endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
	# try_compile command generates an executable and by default CMake generates an AppBundle for WindowsStore.
	# This can cause a failure, because the path of that AppBundle may exceed the the OS maximum path limit.
	set(ENV{AppxBundle} no)
endif()

set(CMAKE_FIND_ROOT_PATH @CMAKE_INSTALL_PREFIX@)
set(CMAKE_SYSROOT @CMAKE_SYSROOT@)

# Hack as cmake on windows doesn't work with setting only CMAKE_FIND_ROOT_PATH and CMAKE_SYSROOT
set(CMAKE_PREFIX_PATH @CMAKE_SYSROOT@;@CMAKE_INSTALL_PREFIX@;@CMAKE_INSTALL_PREFIX@/lib;@CMAKE_INSTALL_PREFIX@/lib/cmake;@CMAKE_INSTALL_PREFIX@/share)

set(CMAKE_EXPORT_NO_PACKAGE_REGISTRY ON)
set(CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY ON)
set(CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY ON)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

set(ENV{PATH} "@CMAKE_SYSROOT@/bin;$ENV{PATH}")
set(MSYS_ROOT_PATH @CMAKE_SYSROOT@/msys2)

if(CMAKE_SYSTEM_NAME STREQUAL Windows)
	add_definitions(-DNTDDI_VERSION=NTDDI_WIN7)
	add_definitions(-D_WIN32_WINNT=_WIN32_WINNT_WIN7)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
	add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	add_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS)
endif()

set(ENABLE_PYTHON OFF CACHE BOOL "Enable python support?" FORCE)
