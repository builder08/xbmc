#!/bin/sh

#      Copyright (C) 2013 Team XBMC
#      http://xbmc.org
# 
# This script is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this script; see the file COPYING.  If not, see
# <http://www.gnu.org/licenses/>.

# Original author: Karlson2k (Evgeny Grin)

cppdataFile="$1"
sourceFileUrl='ftp://ftp.unicode.org/Public/6.3.0/ucd/CaseFolding.txt'
codeLineTemplateS='  m.insert(charcharMapElement(0x\1, 0x\2)); // '
codeLineTemplateF3='    { 0x\1, { { 0x\2, 0x\3, 0x\4 }, 3 } }, //'
codeLineTemplateF2='    { 0x\1, { { 0x\2, 0x\3 }, 2 } }, //'
localFile='CaseFolding.txt'
sedScript='digitsSedScript.sed'

if [ -z "$cppdataFile" ]; then
  echo 'No output file specified!'
  exit 2
fi
if [ ! -f "$cppdataFile" ]; then
  echo 'File "'"$cppdataFile"'" do not exist!'
  exit 2
fi

echo 'Downloading data file...'
wget $sourceFileUrl -O $localFile || exit 1

sourceFilename=$(head -n 1 $localFile)
sourceFilename=${sourceFilename#\# }

echo 'Writing .cpp data file prefix for stage 1...'
cat << _EOF_ >> $cppdataFile || exit 1


// generated by "${0##*/}"
CUtf32Utils::charcharMap CUtf32Utils::foldSimpleCharsMapFiller(void)
{
  charcharMap m;

  // source: $sourceFilename
  // see $sourceFileUrl
_EOF_

echo 'Generating .cpp data file, stage 1...'
sed -n -e's|^\([0-9A-F]\{4,5\}\); C; \([0-9A-F]\{4,5\}\); *# |'"$codeLineTemplateS"'|p' $localFile  >> $cppdataFile || exit 1

echo 'Writing .cpp data file suffix for stage 1...'
cat << _EOF_ >> $cppdataFile || exit 1

  return m;
}
_EOF_

echo 'Writing .cpp data file prefix for stage 2...'
cat << _EOF_ >> $cppdataFile || exit 1


// generated by "${0##*/}"
CUtf32Utils::charstrMap CUtf32Utils::foldFullCharsMapFiller(void)
{
  const struct mapFillElement
  {
    charstrMap::key_type Key;
    charstrMap::mapped_type Value;
  } mapFiller[] =
  {
    // source: $sourceFilename
    // see $sourceFileUrl
_EOF_

echo 'Generating .cpp data file, stage 2...'
sed -n \
  -e's|^\([0-9A-F]\{4,5\}\); F; \([0-9A-F]\{4,5\}\) \([0-9A-F]\{4,5\}\) \([0-9A-F]\{4,5\}\); *# |'"$codeLineTemplateF3"'|p' \
  -e's|^\([0-9A-F]\{4,5\}\); F; \([0-9A-F]\{4,5\}\) \([0-9A-F]\{4,5\}\); *# |'"$codeLineTemplateF2"'|p' \
  $localFile  >> $cppdataFile || exit 1

echo 'Writing .cpp data file suffix for stage 2...'
cat << _EOF_ >> $cppdataFile || exit 1
    { 0, { { 0 }, 0 } }
  };

  charstrMap m;
  for (int i = 0; mapFiller[i].Key; i++)
    m.insert(charstrMapElement(mapFiller[i].Key, mapFiller[i].Value));

  return m;
}
_EOF_


rm $localFile
  
exit 0
