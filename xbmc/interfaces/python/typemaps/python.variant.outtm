<%
/*
 *      Copyright (C) 2005-2013 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */
    boolean ispointer = swigTypeParser.SwigType_ispointer(type)
    String accessor = ispointer ? '->' : '.'
%>
    if (<%if (ispointer) { %>${api} != NULL && <% } %>!${api}${accessor}isNull())
    {
      if (${api}${accessor}isInteger())
      {
        ${helper.getOutConversion('int',result,method,[ 'api' : api + accessor + 'asInteger()' ])}
      }
      else if (${api}${accessor}isUnsignedInteger())
      {
        ${helper.getOutConversion('unsigned int',result,method,[ 'api' : api + accessor + 'asUnsignedInteger()' ])}
      }
      else if (${api}${accessor}isBoolean())
      {
        ${helper.getOutConversion('bool',result,method,[ 'api' : api + accessor + 'asBoolean()' ])}
      }
      else if (${api}${accessor}isString())
      {
        ${helper.getOutConversion('std::string',result,method,[ 'api' : api + accessor + 'asString()' ])}
      }
      else if (${api}${accessor}isDouble())
      {
        ${helper.getOutConversion('double',result,method,[ 'api' : api + accessor + 'asDouble()' ])}
      }
      else
      {
        std::string variantType = "unknown";
        if (${api}${accessor}isArray())
          variantType = "array";
        else if (${api}${accessor}isObject())
          variantType = "object";

        CLog::Log(LOGERROR, "EXCEPTION: Unsupported CVariant type \"%s\"", variantType.c_str());
        PyErr_SetString(PyExc_TypeError, std::string("Unsupported CVariant type \"" + variantType + "\"").c_str());
        return NULL;
      }
    }
    else
      ${result} = Py_None;
